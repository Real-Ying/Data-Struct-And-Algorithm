#define MaxSize 50
typedef struct{
    ElemType data[MaxSize];
    int length;
}SqList;

#define InitSize 50
typedef struct{
    ElemType *data;
    int MaxSize,length;
}SqList;

L.data = (ElemType*)malloc(sizeof(ElemType)*InitSize); 

//插入
bool ListInsert(SqList &L, ElemType e,int i){
    if(i<1 ||i>length+1)   
        return false;
	if(i>MaxSize)
		return false;
    for(int j=L.length; j>i; j--)
		L.data[j]=L.data[j-1];    
    L.data[i-1]=e;
	L.length++;
}

//按位删除
bool ListDelete(SqList &L,ElemType &e,int i){
	if(i<1 ||i>length)
        return false;
    e=L.data[i-1];
	for(int j=i;j<length;j--)  
		L.data[j-1]=L.data[j];
	L.length--;
	return true;
}

//按值删除：时间复杂度O(n),空间复杂度O(1)
//法一
void Del_x_1(SqList &L,ElemType x){
	int k=0；
	for(int i=0;i<length;i++)
		if(L.data[i]!=x)
			L.data[k]=L.data[i];
            k++;
	L.length=k;		
}
//法二
void Del_x_2(SqList &L,ElemType x){
	int i=0，k=0;
	while(i<1){
		if(L.data[i]==x)
			k++;
		else
			L.data[i-k]=L.data[i];    
		i++;	
	}
	L.length=L.length-k;
}

//按值查找,返回位序
void LocateElem(SqList L,ElemType e){
     for(int i=0;i<L.length;i++)
	 if(L.data[i]==e)
	    return i-1;
     else
	    return false;
}

//逆置：复杂度O(1)
void Reserse(SqList &L){
     ElemType temp;
     for(int i=0;i<L.length/2;i++){
	temp=L.data[i];    
	L.data[i]=L.data[L.length-1-i];   
	L.data[L.length-1-i]=temp;    
	}		
}

//区域交换：将A[m+n]中存放的两个顺序表位置交换
void Reserse(SqList &A[];int left;int right;int ArrarySize){
	ElemType temp;
	if(left<0 || right>=ArrarySize || left>=right)    
		return false;
	int mid=(left+right)/2;         
	for(int i=0;i<mid-left;i++){   
		temp=A[left+i];             
		A[left+i]=A[right-i];       
		A[right-i]=temp;
	}
}
Reserse(A,0,m+n-1,m+n);    //注意这道题是a1~am,b1~bn
Reserse(A,0,n-1,n);
Reserse(A,n,n+m-1,m);

//合并：两个有序合并成一个有序
bool Merge(SqList L1,SqList L2,SqList &L3){
	if(L1.length+L2.length>L3.length)
		return false;
	int i=0,j=0,k=0;
	while(i<L1.length && j<L2.length){
		if(L1.data[i]<L2.data[j])
			L3.data[k++]=L1.data[i++];
		else
			L3.data[k++]=L2.data[j++];
	}
	while(i<L1.length)
		L3.data[k++]=L1.data[i++];
	while(j<L2.length)
		L3.data[k++]=L2.data[j++];
	L3.length=k;
	return true;
}

//删除重复值(有序)
bool Del_Same(SqList &L){
	if(L.length==0)
	   return false;
	int i,j;         
	for(i=0,j=1;j<L.length;j++)   
	    if(L.data[i]!=L.data[j])    
	       L.data[++i]=L.data[j]；
	L.length=i+1;  
}

//删除区域[s,t]
bool Del_st_1(SqList &L,ElemType s,ElemType t){
	if(L.length==0)
		return false;
	for(int i=0;i<L.length&&L.data[i]<s;i++);
    for(int i=0;i<L.length&&L.data[i]<s;i++);//寻找大于t的第一个元素
    for(;j<L.length;i++,j++)    
		L.data[i]=L.data[j];
    L.length=i;    
    return true;
}
